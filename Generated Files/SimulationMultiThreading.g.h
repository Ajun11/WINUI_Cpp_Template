// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#include "winrt/ControlSystem.h"
namespace winrt::ControlSystem::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES SimulationMultiThreading_base : implements<D, ControlSystem::SimulationMultiThreading, I...>
    {
        using base_type = SimulationMultiThreading_base;
        using class_type = ControlSystem::SimulationMultiThreading;
        using implements_type = typename SimulationMultiThreading_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"ControlSystem.SimulationMultiThreading";
        }
    };
}
namespace winrt::ControlSystem::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES SimulationMultiThreadingT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = ControlSystem::SimulationMultiThreading;

        hstring GetRuntimeClassName() const
        {
            return L"ControlSystem.SimulationMultiThreading";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_SIMULATIONMULTITHREADING_XAML_G_H) || __has_include("SimulationMultiThreading.xaml.g.h")

#include "SimulationMultiThreading.xaml.g.h"

#else

namespace winrt::ControlSystem::implementation
{
    template <typename D, typename... I>
    using SimulationMultiThreadingT = SimulationMultiThreading_base<D, I...>;
}

#endif
