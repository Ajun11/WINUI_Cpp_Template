// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_ControlSystem_1_H
#define WINRT_ControlSystem_1_H
#include "winrt/impl/ControlSystem.0.h"
WINRT_EXPORT namespace winrt::ControlSystem
{
    struct WINRT_IMPL_EMPTY_BASES IMainPage :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMainPage>
    {
        IMainPage(std::nullptr_t = nullptr) noexcept {}
        IMainPage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IMainWindow :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMainWindow>
    {
        IMainWindow(std::nullptr_t = nullptr) noexcept {}
        IMainWindow(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPage1 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPage1>
    {
        IPage1(std::nullptr_t = nullptr) noexcept {}
        IPage1(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPage2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPage2>
    {
        IPage2(std::nullptr_t = nullptr) noexcept {}
        IPage2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPage3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPage3>
    {
        IPage3(std::nullptr_t = nullptr) noexcept {}
        IPage3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPage4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPage4>
    {
        IPage4(std::nullptr_t = nullptr) noexcept {}
        IPage4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IParameterSet :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParameterSet>
    {
        IParameterSet(std::nullptr_t = nullptr) noexcept {}
        IParameterSet(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ISettingsPage :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISettingsPage>
    {
        ISettingsPage(std::nullptr_t = nullptr) noexcept {}
        ISettingsPage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ISimulationMultiThreading :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISimulationMultiThreading>
    {
        ISimulationMultiThreading(std::nullptr_t = nullptr) noexcept {}
        ISimulationMultiThreading(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
