// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_ControlSystem_0_H
#define WINRT_ControlSystem_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::ControlSystem
{
    struct IMainPage;
    struct IMainWindow;
    struct IPage1;
    struct IPage2;
    struct IPage3;
    struct IPage4;
    struct IParameterSet;
    struct ISettingsPage;
    struct ISimulationMultiThreading;
    struct MainPage;
    struct MainWindow;
    struct Page1;
    struct Page2;
    struct Page3;
    struct Page4;
    struct ParameterSet;
    struct SettingsPage;
    struct SimulationMultiThreading;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::ControlSystem::IMainPage>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::IMainWindow>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::IPage1>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::IPage2>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::IPage3>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::IPage4>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::IParameterSet>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::ISettingsPage>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::ISimulationMultiThreading>{ using type = interface_category; };
    template <> struct category<winrt::ControlSystem::MainPage>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::MainWindow>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::Page1>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::Page2>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::Page3>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::Page4>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::ParameterSet>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::SettingsPage>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::SimulationMultiThreading>{ using type = class_category; };
    template <> struct category<winrt::ControlSystem::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::ControlSystem::MainPage> = L"ControlSystem.MainPage";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::MainWindow> = L"ControlSystem.MainWindow";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::Page1> = L"ControlSystem.Page1";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::Page2> = L"ControlSystem.Page2";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::Page3> = L"ControlSystem.Page3";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::Page4> = L"ControlSystem.Page4";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::ParameterSet> = L"ControlSystem.ParameterSet";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::SettingsPage> = L"ControlSystem.SettingsPage";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::SimulationMultiThreading> = L"ControlSystem.SimulationMultiThreading";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::XamlMetaDataProvider> = L"ControlSystem.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IMainPage> = L"ControlSystem.IMainPage";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IMainWindow> = L"ControlSystem.IMainWindow";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IPage1> = L"ControlSystem.IPage1";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IPage2> = L"ControlSystem.IPage2";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IPage3> = L"ControlSystem.IPage3";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IPage4> = L"ControlSystem.IPage4";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::IParameterSet> = L"ControlSystem.IParameterSet";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::ISettingsPage> = L"ControlSystem.ISettingsPage";
    template <> inline constexpr auto& name_v<winrt::ControlSystem::ISimulationMultiThreading> = L"ControlSystem.ISimulationMultiThreading";
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IMainPage>{ 0xA07CA22E,0x0613,0x50CB,{ 0x8C,0xA3,0x1F,0x70,0x29,0x36,0xA3,0xD8 } }; // A07CA22E-0613-50CB-8CA3-1F702936A3D8
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IMainWindow>{ 0x8C09F27F,0x0855,0x5293,{ 0xB3,0x0C,0x07,0x7A,0x91,0xEA,0xF0,0xB8 } }; // 8C09F27F-0855-5293-B30C-077A91EAF0B8
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IPage1>{ 0xF7BBED1C,0x02AE,0x52C1,{ 0x8D,0x1B,0xC3,0xE7,0x9D,0xC8,0x5A,0xD0 } }; // F7BBED1C-02AE-52C1-8D1B-C3E79DC85AD0
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IPage2>{ 0x0D70C7AE,0x416C,0x5FDD,{ 0x9C,0x33,0xA4,0x92,0x3B,0x51,0xDB,0x66 } }; // 0D70C7AE-416C-5FDD-9C33-A4923B51DB66
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IPage3>{ 0xFD31E96A,0x5921,0x5E22,{ 0x9A,0xB1,0x6A,0x04,0x24,0x9B,0x09,0xF6 } }; // FD31E96A-5921-5E22-9AB1-6A04249B09F6
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IPage4>{ 0x30DFA547,0x9629,0x5F8C,{ 0xA0,0xD1,0xF9,0x3C,0xC4,0x6E,0x85,0xE0 } }; // 30DFA547-9629-5F8C-A0D1-F93CC46E85E0
    template <> inline constexpr guid guid_v<winrt::ControlSystem::IParameterSet>{ 0x7A086517,0xA892,0x58C0,{ 0xB5,0x28,0xF4,0x1D,0x1B,0x81,0xD9,0x18 } }; // 7A086517-A892-58C0-B528-F41D1B81D918
    template <> inline constexpr guid guid_v<winrt::ControlSystem::ISettingsPage>{ 0x05871DCB,0x99B5,0x5F4A,{ 0xB9,0x78,0x2D,0x29,0xCF,0xFF,0x08,0xC8 } }; // 05871DCB-99B5-5F4A-B978-2D29CFFF08C8
    template <> inline constexpr guid guid_v<winrt::ControlSystem::ISimulationMultiThreading>{ 0xF7732324,0x3463,0x5FCF,{ 0x8F,0xFC,0xFD,0x1E,0x3B,0xF3,0xC1,0x0D } }; // F7732324-3463-5FCF-8FFC-FD1E3BF3C10D
    template <> struct default_interface<winrt::ControlSystem::MainPage>{ using type = winrt::ControlSystem::IMainPage; };
    template <> struct default_interface<winrt::ControlSystem::MainWindow>{ using type = winrt::ControlSystem::IMainWindow; };
    template <> struct default_interface<winrt::ControlSystem::Page1>{ using type = winrt::ControlSystem::IPage1; };
    template <> struct default_interface<winrt::ControlSystem::Page2>{ using type = winrt::ControlSystem::IPage2; };
    template <> struct default_interface<winrt::ControlSystem::Page3>{ using type = winrt::ControlSystem::IPage3; };
    template <> struct default_interface<winrt::ControlSystem::Page4>{ using type = winrt::ControlSystem::IPage4; };
    template <> struct default_interface<winrt::ControlSystem::ParameterSet>{ using type = winrt::ControlSystem::IParameterSet; };
    template <> struct default_interface<winrt::ControlSystem::SettingsPage>{ using type = winrt::ControlSystem::ISettingsPage; };
    template <> struct default_interface<winrt::ControlSystem::SimulationMultiThreading>{ using type = winrt::ControlSystem::ISimulationMultiThreading; };
    template <> struct default_interface<winrt::ControlSystem::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::ControlSystem::IMainPage>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::IMainWindow>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::IPage1>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::IPage2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::IPage3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::IPage4>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::IParameterSet>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::ISettingsPage>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::ControlSystem::ISimulationMultiThreading>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_ControlSystem_IMainPage
    {
    };
    template <> struct consume<winrt::ControlSystem::IMainPage>
    {
        template <typename D> using type = consume_ControlSystem_IMainPage<D>;
    };
    template <typename D>
    struct consume_ControlSystem_IMainWindow
    {
    };
    template <> struct consume<winrt::ControlSystem::IMainWindow>
    {
        template <typename D> using type = consume_ControlSystem_IMainWindow<D>;
    };
    template <typename D>
    struct consume_ControlSystem_IPage1
    {
    };
    template <> struct consume<winrt::ControlSystem::IPage1>
    {
        template <typename D> using type = consume_ControlSystem_IPage1<D>;
    };
    template <typename D>
    struct consume_ControlSystem_IPage2
    {
    };
    template <> struct consume<winrt::ControlSystem::IPage2>
    {
        template <typename D> using type = consume_ControlSystem_IPage2<D>;
    };
    template <typename D>
    struct consume_ControlSystem_IPage3
    {
    };
    template <> struct consume<winrt::ControlSystem::IPage3>
    {
        template <typename D> using type = consume_ControlSystem_IPage3<D>;
    };
    template <typename D>
    struct consume_ControlSystem_IPage4
    {
    };
    template <> struct consume<winrt::ControlSystem::IPage4>
    {
        template <typename D> using type = consume_ControlSystem_IPage4<D>;
    };
    template <typename D>
    struct consume_ControlSystem_IParameterSet
    {
    };
    template <> struct consume<winrt::ControlSystem::IParameterSet>
    {
        template <typename D> using type = consume_ControlSystem_IParameterSet<D>;
    };
    template <typename D>
    struct consume_ControlSystem_ISettingsPage
    {
    };
    template <> struct consume<winrt::ControlSystem::ISettingsPage>
    {
        template <typename D> using type = consume_ControlSystem_ISettingsPage<D>;
    };
    template <typename D>
    struct consume_ControlSystem_ISimulationMultiThreading
    {
    };
    template <> struct consume<winrt::ControlSystem::ISimulationMultiThreading>
    {
        template <typename D> using type = consume_ControlSystem_ISimulationMultiThreading<D>;
    };
}
#endif
